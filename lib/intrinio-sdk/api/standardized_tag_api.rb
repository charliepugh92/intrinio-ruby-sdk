=begin
#Intrinio API

#Welcome to the Intrinio API! Through our Marketplace, we offer a wide selection of financial data feeds sourced by our own proprietary processes as well as from many data vendors. The primary application of the Intrinio API is for use in third-party applications and integrations or for end-users utilizing the Excel add-in and Google Sheets add-on. The Intrinio API uses HTTPS verbs and a RESTful endpoint structure, which makes it easy to request data from Intrinio. Responses are delivered in JSON format. If you need additional help in using the API, go to our home page (https://intrinio.com) and click on the chat icon in the lower right corner.

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module Intrinio
  class StandardizedTagApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Filter Standardized Tags
    # Returns Standarized Tags that match the given filters
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag Tag
    # @option opts [String] :type Type
    # @option opts [String] :parent ID of tag parent
    # @option opts [String] :statement_code Statement Code
    # @option opts [String] :fs_template Template (default to industrial)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<StandardizedTag>]
    def filter_standardized_tags(opts = {})
      data, _status_code, _headers = filter_standardized_tags_with_http_info(opts)
      return data
    end

    # Filter Standardized Tags
    # Returns Standarized Tags that match the given filters
    # @param [Hash] opts the optional parameters
    # @option opts [String] :tag Tag
    # @option opts [String] :type Type
    # @option opts [String] :parent ID of tag parent
    # @option opts [String] :statement_code Statement Code
    # @option opts [String] :fs_template Template
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(Array<StandardizedTag>, Fixnum, Hash)>] Array<StandardizedTag> data, response status code and response headers
    def filter_standardized_tags_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StandardizedTagApi.filter_standardized_tags ..."
      end
      if @api_client.config.client_side_validation && opts[:'statement_code'] && !['income_statement', 'balance_sheet_statement', 'cash_flow_statement', 'calculations'].include?(opts[:'statement_code'])
        fail ArgumentError, 'invalid value for "statement_code", must be one of income_statement, balance_sheet_statement, cash_flow_statement, calculations'
      end
      if @api_client.config.client_side_validation && opts[:'fs_template'] && !['industrial', 'financial'].include?(opts[:'fs_template'])
        fail ArgumentError, 'invalid value for "fs_template", must be one of industrial, financial'
      end
      # resource path
      local_var_path = "/standardized_tags/filter"

      # query parameters
      query_params = {}
      query_params[:'tag'] = opts[:'tag'] if !opts[:'tag'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'parent'] = opts[:'parent'] if !opts[:'parent'].nil?
      query_params[:'statement_code'] = opts[:'statement_code'] if !opts[:'statement_code'].nil?
      query_params[:'fs_template'] = opts[:'fs_template'] if !opts[:'fs_template'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['HttpHeaderApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<StandardizedTag>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StandardizedTagApi#filter_standardized_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Standardized Tags
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<StandardizedTag>]
    def get_all_standardized_tags(opts = {})
      data, _status_code, _headers = get_all_standardized_tags_with_http_info(opts)
      return data
    end

    # Get All Standardized Tags
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(Array<StandardizedTag>, Fixnum, Hash)>] Array<StandardizedTag> data, response status code and response headers
    def get_all_standardized_tags_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StandardizedTagApi.get_all_standardized_tags ..."
      end
      # resource path
      local_var_path = "/standardized_tags"

      # query parameters
      query_params = {}
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['HttpHeaderApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<StandardizedTag>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StandardizedTagApi#get_all_standardized_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Standardized Tag by ID
    # 
    # @param tag_id The Intrinio ID for the tag
    # @param [Hash] opts the optional parameters
    # @return [StandardizedTag]
    def get_standardized_tag_by_id(tag_id, opts = {})
      data, _status_code, _headers = get_standardized_tag_by_id_with_http_info(tag_id, opts)
      return data
    end

    # Get a Standardized Tag by ID
    # 
    # @param tag_id The Intrinio ID for the tag
    # @param [Hash] opts the optional parameters
    # @return [Array<(StandardizedTag, Fixnum, Hash)>] StandardizedTag data, response status code and response headers
    def get_standardized_tag_by_id_with_http_info(tag_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StandardizedTagApi.get_standardized_tag_by_id ..."
      end
      # verify the required parameter 'tag_id' is set
      if @api_client.config.client_side_validation && tag_id.nil?
        fail ArgumentError, "Missing the required parameter 'tag_id' when calling StandardizedTagApi.get_standardized_tag_by_id"
      end
      # resource path
      local_var_path = "/standardized_tags/{tag_id}".sub('{' + 'tag_id' + '}', tag_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['HttpHeaderApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StandardizedTag')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StandardizedTagApi#get_standardized_tag_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Data Point (Number) for The Standardized Tag
    # Returns a numeric data point for the Standardized Tag and entity `identifier`
    # @param id The Intrinio Standardized Tag ID or its tag
    # @param identifier An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @return [DataPointNumber]
    def get_standardized_tag_data_point_number(id, identifier, opts = {})
      data, _status_code, _headers = get_standardized_tag_data_point_number_with_http_info(id, identifier, opts)
      return data
    end

    # Get Data Point (Number) for The Standardized Tag
    # Returns a numeric data point for the Standardized Tag and entity &#x60;identifier&#x60;
    # @param id The Intrinio Standardized Tag ID or its tag
    # @param identifier An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataPointNumber, Fixnum, Hash)>] DataPointNumber data, response status code and response headers
    def get_standardized_tag_data_point_number_with_http_info(id, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StandardizedTagApi.get_standardized_tag_data_point_number ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StandardizedTagApi.get_standardized_tag_data_point_number"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling StandardizedTagApi.get_standardized_tag_data_point_number"
      end
      # resource path
      local_var_path = "/standardized_tags/{id}/data_point/{identifier}/number".sub('{' + 'id' + '}', id.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['HttpHeaderApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataPointNumber')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StandardizedTagApi#get_standardized_tag_data_point_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Data Point (Text) for the Standardized Tag
    # Returns a text data point for the Standardized Tag and entity `identifier`
    # @param id The Intrinio Standardized Tag ID or its tag
    # @param identifier An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @return [DataPointText]
    def get_standardized_tag_data_point_text(id, identifier, opts = {})
      data, _status_code, _headers = get_standardized_tag_data_point_text_with_http_info(id, identifier, opts)
      return data
    end

    # Get Data Point (Text) for the Standardized Tag
    # Returns a text data point for the Standardized Tag and entity &#x60;identifier&#x60;
    # @param id The Intrinio Standardized Tag ID or its tag
    # @param identifier An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataPointText, Fixnum, Hash)>] DataPointText data, response status code and response headers
    def get_standardized_tag_data_point_text_with_http_info(id, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StandardizedTagApi.get_standardized_tag_data_point_text ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StandardizedTagApi.get_standardized_tag_data_point_text"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling StandardizedTagApi.get_standardized_tag_data_point_text"
      end
      # resource path
      local_var_path = "/standardized_tags/{id}/data_point/{identifier}/text".sub('{' + 'id' + '}', id.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['HttpHeaderApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataPointText')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StandardizedTagApi#get_standardized_tag_data_point_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Historical Data for the Standardized Tag
    # Returns historical values for the Standardized Tag and the Entity represented by the given `identifier`
    # @param id The Intrinio Standardized Tag ID or its tag
    # @param identifier An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Filter by type, when applicable
    # @option opts [Date] :start_date Get historical data on or after this date
    # @option opts [Date] :end_date Get historical date on or before this date
    # @option opts [String] :sort_order Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<HistoricalData>]
    def get_standardized_tag_historical_data(id, identifier, opts = {})
      data, _status_code, _headers = get_standardized_tag_historical_data_with_http_info(id, identifier, opts)
      return data
    end

    # Get Historical Data for the Standardized Tag
    # Returns historical values for the Standardized Tag and the Entity represented by the given &#x60;identifier&#x60;
    # @param id The Intrinio Standardized Tag ID or its tag
    # @param identifier An identifier for an entity such as a Company, Security, Index, etc (Ticker, FIGI, ISIN, CUSIP, CIK, LEI, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Filter by type, when applicable
    # @option opts [Date] :start_date Get historical data on or after this date
    # @option opts [Date] :end_date Get historical date on or before this date
    # @option opts [String] :sort_order Sort by date &#x60;asc&#x60; or &#x60;desc&#x60;
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(Array<HistoricalData>, Fixnum, Hash)>] Array<HistoricalData> data, response status code and response headers
    def get_standardized_tag_historical_data_with_http_info(id, identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StandardizedTagApi.get_standardized_tag_historical_data ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling StandardizedTagApi.get_standardized_tag_historical_data"
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling StandardizedTagApi.get_standardized_tag_historical_data"
      end
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !['asc', 'desc'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of asc, desc'
      end
      # resource path
      local_var_path = "/standardized_tags/{id}/historical_data/{identifier}".sub('{' + 'id' + '}', id.to_s).sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['HttpHeaderApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<HistoricalData>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StandardizedTagApi#get_standardized_tag_historical_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Standardized Tags
    # Searches for Standardized Tags matching the text `query`
    # @param query 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<StandardizedTag>]
    def search_standardized_tags(query, opts = {})
      data, _status_code, _headers = search_standardized_tags_with_http_info(query, opts)
      return data
    end

    # Search Standardized Tags
    # Searches for Standardized Tags matching the text &#x60;query&#x60;
    # @param query 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(Array<StandardizedTag>, Fixnum, Hash)>] Array<StandardizedTag> data, response status code and response headers
    def search_standardized_tags_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: StandardizedTagApi.search_standardized_tags ..."
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling StandardizedTagApi.search_standardized_tags"
      end
      # resource path
      local_var_path = "/standardized_tags/search"

      # query parameters
      query_params = {}
      query_params[:'query'] = query
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['HttpHeaderApiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<StandardizedTag>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StandardizedTagApi#search_standardized_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
