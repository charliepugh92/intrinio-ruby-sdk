=begin
#Intrinio API

#Welcome to the Intrinio API! Through our Marketplace, we offer a wide selection of financial data feeds sourced by our own proprietary processes as well as from many data vendors. The primary application of the Intrinio API is for use in third-party applications and integrations or for end-users utilizing the Excel add-in and Google Sheets add-on. The Intrinio API uses HTTPS verbs and a RESTful endpoint structure, which makes it easy to request data from Intrinio. Responses are delivered in JSON format. If you need additional help in using the API, go to our home page (https://intrinio.com) and click on the chat icon in the lower right corner.

OpenAPI spec version: 2.0.2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module Intrinio
  class IndexApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get All Economic Indices
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseEconomicIndices]
    def get_all_economic_indices(opts = {})
      data, _status_code, _headers = get_all_economic_indices_with_http_info(opts)
      return data
    end

    # Get All Economic Indices
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseEconomicIndices, Fixnum, Hash)>] ApiResponseEconomicIndices data, response status code and response headers
    def get_all_economic_indices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.get_all_economic_indices ..."
      end
      # resource path
      local_var_path = "/indices/economic"

      # query parameters
      query_params = {}
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseEconomicIndices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_all_economic_indices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All SIC Indices
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseSICIndices]
    def get_all_sic_indices(opts = {})
      data, _status_code, _headers = get_all_sic_indices_with_http_info(opts)
      return data
    end

    # Get All SIC Indices
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseSICIndices, Fixnum, Hash)>] ApiResponseSICIndices data, response status code and response headers
    def get_all_sic_indices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.get_all_sic_indices ..."
      end
      # resource path
      local_var_path = "/indices/sic"

      # query parameters
      query_params = {}
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseSICIndices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_all_sic_indices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Stock Market Indices
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseStockMarketIndices]
    def get_all_stock_market_indices(opts = {})
      data, _status_code, _headers = get_all_stock_market_indices_with_http_info(opts)
      return data
    end

    # Get All Stock Market Indices
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseStockMarketIndices, Fixnum, Hash)>] ApiResponseStockMarketIndices data, response status code and response headers
    def get_all_stock_market_indices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.get_all_stock_market_indices ..."
      end
      # resource path
      local_var_path = "/indices/stock_market"

      # query parameters
      query_params = {}
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseStockMarketIndices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_all_stock_market_indices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an Economic Index by ID
    # 
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @return [EconomicIndex]
    def get_economic_index_by_id(identifier, opts = {})
      data, _status_code, _headers = get_economic_index_by_id_with_http_info(identifier, opts)
      return data
    end

    # Get an Economic Index by ID
    # 
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @return [Array<(EconomicIndex, Fixnum, Hash)>] EconomicIndex data, response status code and response headers
    def get_economic_index_by_id_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.get_economic_index_by_id ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling IndexApi.get_economic_index_by_id"
      end
      # resource path
      local_var_path = "/indices/economic/{identifier}".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EconomicIndex')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_economic_index_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Economic Index Data Point (Number)
    # Returns a numeric value for the given `tag` for the Economic Index with the given `identifier`
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [DataPointNumber]
    def get_economic_index_data_point_number(identifier, tag, opts = {})
      data, _status_code, _headers = get_economic_index_data_point_number_with_http_info(identifier, tag, opts)
      return data
    end

    # Get Economic Index Data Point (Number)
    # Returns a numeric value for the given &#x60;tag&#x60; for the Economic Index with the given &#x60;identifier&#x60;
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataPointNumber, Fixnum, Hash)>] DataPointNumber data, response status code and response headers
    def get_economic_index_data_point_number_with_http_info(identifier, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.get_economic_index_data_point_number ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling IndexApi.get_economic_index_data_point_number"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling IndexApi.get_economic_index_data_point_number"
      end
      # resource path
      local_var_path = "/indices/economic/{identifier}/data_point/{tag}/number".sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'tag' + '}', tag.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataPointNumber')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_economic_index_data_point_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Economic Index Data Point (Text)
    # Returns a text value for the given `tag` for the Economic Index with the given `identifier`
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [DataPointText]
    def get_economic_index_data_point_text(identifier, tag, opts = {})
      data, _status_code, _headers = get_economic_index_data_point_text_with_http_info(identifier, tag, opts)
      return data
    end

    # Get Economic Index Data Point (Text)
    # Returns a text value for the given &#x60;tag&#x60; for the Economic Index with the given &#x60;identifier&#x60;
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataPointText, Fixnum, Hash)>] DataPointText data, response status code and response headers
    def get_economic_index_data_point_text_with_http_info(identifier, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.get_economic_index_data_point_text ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling IndexApi.get_economic_index_data_point_text"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling IndexApi.get_economic_index_data_point_text"
      end
      # resource path
      local_var_path = "/indices/economic/{identifier}/data_point/{tag}/text".sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'tag' + '}', tag.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataPointText')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_economic_index_data_point_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Economic Index Historical Data
    # Returns historical values for the given `tag` and the Economic Index with the given `identifier`
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Filter by type, when applicable
    # @option opts [Date] :start_date Get historical data on or after this date
    # @option opts [Date] :end_date Get historical data on or before this date
    # @option opts [String] :sort_order Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Object]
    def get_economic_index_historical_data(identifier, tag, opts = {})
      data, _status_code, _headers = get_economic_index_historical_data_with_http_info(identifier, tag, opts)
      return data
    end

    # Get Economic Index Historical Data
    # Returns historical values for the given &#x60;tag&#x60; and the Economic Index with the given &#x60;identifier&#x60;
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Filter by type, when applicable
    # @option opts [Date] :start_date Get historical data on or after this date
    # @option opts [Date] :end_date Get historical data on or before this date
    # @option opts [String] :sort_order Sort by date &#x60;asc&#x60; or &#x60;desc&#x60;
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_economic_index_historical_data_with_http_info(identifier, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.get_economic_index_historical_data ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling IndexApi.get_economic_index_historical_data"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling IndexApi.get_economic_index_historical_data"
      end
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !['asc', 'desc'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of asc, desc'
      end
      # resource path
      local_var_path = "/indices/economic/{identifier}/historical_data/{tag}".sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'tag' + '}', tag.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_economic_index_historical_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an SIC Index by ID
    # 
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @return [SICIndex]
    def get_sic_index_by_id(identifier, opts = {})
      data, _status_code, _headers = get_sic_index_by_id_with_http_info(identifier, opts)
      return data
    end

    # Get an SIC Index by ID
    # 
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @return [Array<(SICIndex, Fixnum, Hash)>] SICIndex data, response status code and response headers
    def get_sic_index_by_id_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.get_sic_index_by_id ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling IndexApi.get_sic_index_by_id"
      end
      # resource path
      local_var_path = "/indices/sic/{identifier}".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SICIndex')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_sic_index_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SIC Index Data Point (Number)
    # Returns a numeric value for the given `tag` for the SIC Index with the given `identifier`
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [DataPointNumber]
    def get_sic_index_data_point_number(identifier, tag, opts = {})
      data, _status_code, _headers = get_sic_index_data_point_number_with_http_info(identifier, tag, opts)
      return data
    end

    # Get SIC Index Data Point (Number)
    # Returns a numeric value for the given &#x60;tag&#x60; for the SIC Index with the given &#x60;identifier&#x60;
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataPointNumber, Fixnum, Hash)>] DataPointNumber data, response status code and response headers
    def get_sic_index_data_point_number_with_http_info(identifier, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.get_sic_index_data_point_number ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling IndexApi.get_sic_index_data_point_number"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling IndexApi.get_sic_index_data_point_number"
      end
      # resource path
      local_var_path = "/indices/sic/{identifier}/data_point/{tag}/number".sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'tag' + '}', tag.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataPointNumber')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_sic_index_data_point_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SIC Index Data Point (Text)
    # Returns a text value for the given `tag` for the SIC Index with the given `identifier`
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [DataPointText]
    def get_sic_index_data_point_text(identifier, tag, opts = {})
      data, _status_code, _headers = get_sic_index_data_point_text_with_http_info(identifier, tag, opts)
      return data
    end

    # Get SIC Index Data Point (Text)
    # Returns a text value for the given &#x60;tag&#x60; for the SIC Index with the given &#x60;identifier&#x60;
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataPointText, Fixnum, Hash)>] DataPointText data, response status code and response headers
    def get_sic_index_data_point_text_with_http_info(identifier, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.get_sic_index_data_point_text ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling IndexApi.get_sic_index_data_point_text"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling IndexApi.get_sic_index_data_point_text"
      end
      # resource path
      local_var_path = "/indices/sic/{identifier}/data_point/{tag}/text".sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'tag' + '}', tag.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataPointText')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_sic_index_data_point_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get SIC Index Historical Data
    # Returns historical values for the given `tag` and the SIC Index with the given `identifier`
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Filter by type, when applicable
    # @option opts [Date] :start_date Get historical data on or after this date
    # @option opts [Date] :end_date Get historical data on or before this date
    # @option opts [String] :sort_order Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseSICIndexHistoricalData]
    def get_sic_index_historical_data(identifier, tag, opts = {})
      data, _status_code, _headers = get_sic_index_historical_data_with_http_info(identifier, tag, opts)
      return data
    end

    # Get SIC Index Historical Data
    # Returns historical values for the given &#x60;tag&#x60; and the SIC Index with the given &#x60;identifier&#x60;
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Filter by type, when applicable
    # @option opts [Date] :start_date Get historical data on or after this date
    # @option opts [Date] :end_date Get historical data on or before this date
    # @option opts [String] :sort_order Sort by date &#x60;asc&#x60; or &#x60;desc&#x60;
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseSICIndexHistoricalData, Fixnum, Hash)>] ApiResponseSICIndexHistoricalData data, response status code and response headers
    def get_sic_index_historical_data_with_http_info(identifier, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.get_sic_index_historical_data ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling IndexApi.get_sic_index_historical_data"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling IndexApi.get_sic_index_historical_data"
      end
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !['asc', 'desc'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of asc, desc'
      end
      # resource path
      local_var_path = "/indices/sic/{identifier}/historical_data/{tag}".sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'tag' + '}', tag.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseSICIndexHistoricalData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_sic_index_historical_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Stock Market Index by ID
    # 
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @return [StockMarketIndex]
    def get_stock_market_index_by_id(identifier, opts = {})
      data, _status_code, _headers = get_stock_market_index_by_id_with_http_info(identifier, opts)
      return data
    end

    # Get a Stock Market Index by ID
    # 
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @return [Array<(StockMarketIndex, Fixnum, Hash)>] StockMarketIndex data, response status code and response headers
    def get_stock_market_index_by_id_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.get_stock_market_index_by_id ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling IndexApi.get_stock_market_index_by_id"
      end
      # resource path
      local_var_path = "/indices/stock_market/{identifier}".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StockMarketIndex')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_stock_market_index_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Stock Market Index Data Point (Number)
    # Returns a numeric value for the given `tag` for the Stock Market Index with the given `identifier`
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [DataPointNumber]
    def get_stock_market_index_data_point_number(identifier, tag, opts = {})
      data, _status_code, _headers = get_stock_market_index_data_point_number_with_http_info(identifier, tag, opts)
      return data
    end

    # Get Stock Market Index Data Point (Number)
    # Returns a numeric value for the given &#x60;tag&#x60; for the Stock Market Index with the given &#x60;identifier&#x60;
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataPointNumber, Fixnum, Hash)>] DataPointNumber data, response status code and response headers
    def get_stock_market_index_data_point_number_with_http_info(identifier, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.get_stock_market_index_data_point_number ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling IndexApi.get_stock_market_index_data_point_number"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling IndexApi.get_stock_market_index_data_point_number"
      end
      # resource path
      local_var_path = "/indices/stock_market/{identifier}/data_point/{tag}/number".sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'tag' + '}', tag.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataPointNumber')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_stock_market_index_data_point_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Stock Market Index Data Point (Text)
    # Returns a text value for the given `tag` for the Stock Market Index with the given `identifier`
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [DataPointText]
    def get_stock_market_index_data_point_text(identifier, tag, opts = {})
      data, _status_code, _headers = get_stock_market_index_data_point_text_with_http_info(identifier, tag, opts)
      return data
    end

    # Get Stock Market Index Data Point (Text)
    # Returns a text value for the given &#x60;tag&#x60; for the Stock Market Index with the given &#x60;identifier&#x60;
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataPointText, Fixnum, Hash)>] DataPointText data, response status code and response headers
    def get_stock_market_index_data_point_text_with_http_info(identifier, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.get_stock_market_index_data_point_text ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling IndexApi.get_stock_market_index_data_point_text"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling IndexApi.get_stock_market_index_data_point_text"
      end
      # resource path
      local_var_path = "/indices/stock_market/{identifier}/data_point/{tag}/text".sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'tag' + '}', tag.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataPointText')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_stock_market_index_data_point_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Stock Market Index Historical Data
    # Returns historical values for the given `tag` and the Stock Market Index with the given `identifier`
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Filter by type, when applicable
    # @option opts [Date] :start_date Get historical data on or after this date
    # @option opts [Date] :end_date Get historical data on or before this date
    # @option opts [String] :sort_order Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseStockMarketIndexHistoricalData]
    def get_stock_market_index_historical_data(identifier, tag, opts = {})
      data, _status_code, _headers = get_stock_market_index_historical_data_with_http_info(identifier, tag, opts)
      return data
    end

    # Get Stock Market Index Historical Data
    # Returns historical values for the given &#x60;tag&#x60; and the Stock Market Index with the given &#x60;identifier&#x60;
    # @param identifier An Index Identifier (symbol, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Filter by type, when applicable
    # @option opts [Date] :start_date Get historical data on or after this date
    # @option opts [Date] :end_date Get historical data on or before this date
    # @option opts [String] :sort_order Sort by date &#x60;asc&#x60; or &#x60;desc&#x60;
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseStockMarketIndexHistoricalData, Fixnum, Hash)>] ApiResponseStockMarketIndexHistoricalData data, response status code and response headers
    def get_stock_market_index_historical_data_with_http_info(identifier, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.get_stock_market_index_historical_data ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling IndexApi.get_stock_market_index_historical_data"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling IndexApi.get_stock_market_index_historical_data"
      end
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !['asc', 'desc'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of asc, desc'
      end
      # resource path
      local_var_path = "/indices/stock_market/{identifier}/historical_data/{tag}".sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'tag' + '}', tag.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseStockMarketIndexHistoricalData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#get_stock_market_index_historical_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Economic Indices
    # Searches for indices using the text in `query`
    # @param query Search query
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseEconomicIndices]
    def search_economic_indices(query, opts = {})
      data, _status_code, _headers = search_economic_indices_with_http_info(query, opts)
      return data
    end

    # Search Economic Indices
    # Searches for indices using the text in &#x60;query&#x60;
    # @param query Search query
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseEconomicIndices, Fixnum, Hash)>] ApiResponseEconomicIndices data, response status code and response headers
    def search_economic_indices_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.search_economic_indices ..."
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling IndexApi.search_economic_indices"
      end
      # resource path
      local_var_path = "/indices/economic/search"

      # query parameters
      query_params = {}
      query_params[:'query'] = query

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseEconomicIndices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#search_economic_indices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search SIC Indices
    # Searches for indices using the text in `query`
    # @param query Search query
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseSICIndices]
    def search_sic_indices(query, opts = {})
      data, _status_code, _headers = search_sic_indices_with_http_info(query, opts)
      return data
    end

    # Search SIC Indices
    # Searches for indices using the text in &#x60;query&#x60;
    # @param query Search query
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseSICIndices, Fixnum, Hash)>] ApiResponseSICIndices data, response status code and response headers
    def search_sic_indices_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.search_sic_indices ..."
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling IndexApi.search_sic_indices"
      end
      # resource path
      local_var_path = "/indices/sic/search"

      # query parameters
      query_params = {}
      query_params[:'query'] = query

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseSICIndices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#search_sic_indices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Stock Market Indices
    # Searches for indices using the text in `query`
    # @param query Search query
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseStockMarketIndices]
    def search_stock_markets_indices(query, opts = {})
      data, _status_code, _headers = search_stock_markets_indices_with_http_info(query, opts)
      return data
    end

    # Search Stock Market Indices
    # Searches for indices using the text in &#x60;query&#x60;
    # @param query Search query
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseStockMarketIndices, Fixnum, Hash)>] ApiResponseStockMarketIndices data, response status code and response headers
    def search_stock_markets_indices_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: IndexApi.search_stock_markets_indices ..."
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling IndexApi.search_stock_markets_indices"
      end
      # resource path
      local_var_path = "/indices/stock_market/search"

      # query parameters
      query_params = {}
      query_params[:'query'] = query

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseStockMarketIndices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: IndexApi#search_stock_markets_indices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
