=begin
#Intrinio API

#Welcome to the Intrinio API! Through our Marketplace, we offer a wide selection of financial data feeds sourced by our own proprietary processes as well as from many data vendors. The primary application of the Intrinio API is for use in third-party applications and integrations or for end-users utilizing the Excel add-in and Google Sheets add-on. The Intrinio API uses HTTPS verbs and a RESTful endpoint structure, which makes it easy to request data from Intrinio. Responses are delivered in JSON format. If you need additional help in using the API, go to our home page (https://intrinio.com) and click on the chat icon in the lower right corner.

OpenAPI spec version: 2.0.2

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module Intrinio
  class SecurityApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get All Securiites
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseSecurities]
    def get_all_securities(opts = {})
      data, _status_code, _headers = get_all_securities_with_http_info(opts)
      return data
    end

    # Get All Securiites
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseSecurities, Fixnum, Hash)>] ApiResponseSecurities data, response status code and response headers
    def get_all_securities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SecurityApi.get_all_securities ..."
      end
      # resource path
      local_var_path = "/securities"

      # query parameters
      query_params = {}
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseSecurities')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_all_securities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Security by ID
    # 
    # @param identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @return [Security]
    def get_security_by_id(identifier, opts = {})
      data, _status_code, _headers = get_security_by_id_with_http_info(identifier, opts)
      return data
    end

    # Get a Security by ID
    # 
    # @param identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @return [Array<(Security, Fixnum, Hash)>] Security data, response status code and response headers
    def get_security_by_id_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SecurityApi.get_security_by_id ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling SecurityApi.get_security_by_id"
      end
      # resource path
      local_var_path = "/securities/{identifier}".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Security')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_security_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Security Data Point (Number)
    # Returns a numeric value for the given `tag` for the Security with the given `identifier`
    # @param identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [DataPointNumber]
    def get_security_data_point_number(identifier, tag, opts = {})
      data, _status_code, _headers = get_security_data_point_number_with_http_info(identifier, tag, opts)
      return data
    end

    # Get Security Data Point (Number)
    # Returns a numeric value for the given &#x60;tag&#x60; for the Security with the given &#x60;identifier&#x60;
    # @param identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataPointNumber, Fixnum, Hash)>] DataPointNumber data, response status code and response headers
    def get_security_data_point_number_with_http_info(identifier, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SecurityApi.get_security_data_point_number ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling SecurityApi.get_security_data_point_number"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling SecurityApi.get_security_data_point_number"
      end
      # resource path
      local_var_path = "/securities/{identifier}/data_point/{tag}/number".sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'tag' + '}', tag.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataPointNumber')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_security_data_point_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Security Data Point (Text)
    # Returns a text value for the given `tag` for the Security with the given `identifier`
    # @param identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [DataPointText]
    def get_security_data_point_text(identifier, tag, opts = {})
      data, _status_code, _headers = get_security_data_point_text_with_http_info(identifier, tag, opts)
      return data
    end

    # Get Security Data Point (Text)
    # Returns a text value for the given &#x60;tag&#x60; for the Security with the given &#x60;identifier&#x60;
    # @param identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataPointText, Fixnum, Hash)>] DataPointText data, response status code and response headers
    def get_security_data_point_text_with_http_info(identifier, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SecurityApi.get_security_data_point_text ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling SecurityApi.get_security_data_point_text"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling SecurityApi.get_security_data_point_text"
      end
      # resource path
      local_var_path = "/securities/{identifier}/data_point/{tag}/text".sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'tag' + '}', tag.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DataPointText')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_security_data_point_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Security Historical Data
    # Returns historical values for the given `tag` and the Security with the given `identifier`
    # @param identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Filter by type, when applicable
    # @option opts [Date] :start_date Get historical data on or after this date
    # @option opts [Date] :end_date Get historical date on or before this date
    # @option opts [String] :sort_order Sort by date &#x60;asc&#x60; or &#x60;desc&#x60; (default to desc)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseSecurityHistoricalData]
    def get_security_historical_data(identifier, tag, opts = {})
      data, _status_code, _headers = get_security_historical_data_with_http_info(identifier, tag, opts)
      return data
    end

    # Get Security Historical Data
    # Returns historical values for the given &#x60;tag&#x60; and the Security with the given &#x60;identifier&#x60;
    # @param identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @param tag An Intrinio data tag ID or code-name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type Filter by type, when applicable
    # @option opts [Date] :start_date Get historical data on or after this date
    # @option opts [Date] :end_date Get historical date on or before this date
    # @option opts [String] :sort_order Sort by date &#x60;asc&#x60; or &#x60;desc&#x60;
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseSecurityHistoricalData, Fixnum, Hash)>] ApiResponseSecurityHistoricalData data, response status code and response headers
    def get_security_historical_data_with_http_info(identifier, tag, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SecurityApi.get_security_historical_data ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling SecurityApi.get_security_historical_data"
      end
      # verify the required parameter 'tag' is set
      if @api_client.config.client_side_validation && tag.nil?
        fail ArgumentError, "Missing the required parameter 'tag' when calling SecurityApi.get_security_historical_data"
      end
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !['asc', 'desc'].include?(opts[:'sort_order'])
        fail ArgumentError, 'invalid value for "sort_order", must be one of asc, desc'
      end
      # resource path
      local_var_path = "/securities/{identifier}/historical_data/{tag}".sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'tag' + '}', tag.to_s)

      # query parameters
      query_params = {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'sort_order'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseSecurityHistoricalData')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_security_historical_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Stock Price Adjustments for Security
    # Return stock price adjustments for the Security with the given `identifier`
    # @param identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start_date Return price adjustments on or after the date
    # @option opts [Date] :end_date Return price adjustments on or before the date
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseSecurityStockPriceAdjustments]
    def get_security_stock_price_adjustments(identifier, opts = {})
      data, _status_code, _headers = get_security_stock_price_adjustments_with_http_info(identifier, opts)
      return data
    end

    # Get Stock Price Adjustments for Security
    # Return stock price adjustments for the Security with the given &#x60;identifier&#x60;
    # @param identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start_date Return price adjustments on or after the date
    # @option opts [Date] :end_date Return price adjustments on or before the date
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseSecurityStockPriceAdjustments, Fixnum, Hash)>] ApiResponseSecurityStockPriceAdjustments data, response status code and response headers
    def get_security_stock_price_adjustments_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SecurityApi.get_security_stock_price_adjustments ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling SecurityApi.get_security_stock_price_adjustments"
      end
      # resource path
      local_var_path = "/securities/{identifier}/prices/adjustments".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseSecurityStockPriceAdjustments')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_security_stock_price_adjustments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Stock Prices for Security
    # Return stock prices for the Security with the given `identifier`
    # @param identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start_date Return prices on or after the date
    # @option opts [Date] :end_date Return prices on or before the date
    # @option opts [String] :frequency Return stock prices in the given frequency (default to daily)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseSecurityStockPrices]
    def get_security_stock_prices(identifier, opts = {})
      data, _status_code, _headers = get_security_stock_prices_with_http_info(identifier, opts)
      return data
    end

    # Get Stock Prices for Security
    # Return stock prices for the Security with the given &#x60;identifier&#x60;
    # @param identifier A Security identifier (Ticker, FIGI, ISIN, CUSIP, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :start_date Return prices on or after the date
    # @option opts [Date] :end_date Return prices on or before the date
    # @option opts [String] :frequency Return stock prices in the given frequency
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseSecurityStockPrices, Fixnum, Hash)>] ApiResponseSecurityStockPrices data, response status code and response headers
    def get_security_stock_prices_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SecurityApi.get_security_stock_prices ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling SecurityApi.get_security_stock_prices"
      end
      if @api_client.config.client_side_validation && opts[:'frequency'] && !['daily', 'weekly', 'monthly', 'quarterly', 'yearly'].include?(opts[:'frequency'])
        fail ArgumentError, 'invalid value for "frequency", must be one of daily, weekly, monthly, quarterly, yearly'
      end
      # resource path
      local_var_path = "/securities/{identifier}/prices".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'frequency'] = opts[:'frequency'] if !opts[:'frequency'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseSecurityStockPrices')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#get_security_stock_prices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Screen Securities
    # Screen securities using complex logic
    # @param [Hash] opts the optional parameters
    # @option opts [SecurityScreenGroup] :logic The logic to screen with, consisting of operators, clauses, and nested groups
    # @option opts [String] :order_column Results returned sorted by this column
    # @option opts [String] :order_direction Sort order to use with the order_column (default to asc)
    # @option opts [BOOLEAN] :primary_only Return only primary securities (default to false)
    # @return [Array<SecurityScreenResult>]
    def screen_securities(opts = {})
      data, _status_code, _headers = screen_securities_with_http_info(opts)
      return data
    end

    # Screen Securities
    # Screen securities using complex logic
    # @param [Hash] opts the optional parameters
    # @option opts [SecurityScreenGroup] :logic The logic to screen with, consisting of operators, clauses, and nested groups
    # @option opts [String] :order_column Results returned sorted by this column
    # @option opts [String] :order_direction Sort order to use with the order_column
    # @option opts [BOOLEAN] :primary_only Return only primary securities
    # @return [Array<(Array<SecurityScreenResult>, Fixnum, Hash)>] Array<SecurityScreenResult> data, response status code and response headers
    def screen_securities_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SecurityApi.screen_securities ..."
      end
      if @api_client.config.client_side_validation && opts[:'order_direction'] && !['asc', 'desc'].include?(opts[:'order_direction'])
        fail ArgumentError, 'invalid value for "order_direction", must be one of asc, desc'
      end
      # resource path
      local_var_path = "/securities/screen"

      # query parameters
      query_params = {}
      query_params[:'order_column'] = opts[:'order_column'] if !opts[:'order_column'].nil?
      query_params[:'order_direction'] = opts[:'order_direction'] if !opts[:'order_direction'].nil?
      query_params[:'primary_only'] = opts[:'primary_only'] if !opts[:'primary_only'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'logic'])
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<SecurityScreenResult>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#screen_securities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Securities
    # Searches for Securities matching the text `query`
    # @param query 
    # @param [Hash] opts the optional parameters
    # @return [ApiResponseSecurities]
    def search_securities(query, opts = {})
      data, _status_code, _headers = search_securities_with_http_info(query, opts)
      return data
    end

    # Search Securities
    # Searches for Securities matching the text &#x60;query&#x60;
    # @param query 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApiResponseSecurities, Fixnum, Hash)>] ApiResponseSecurities data, response status code and response headers
    def search_securities_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: SecurityApi.search_securities ..."
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling SecurityApi.search_securities"
      end
      # resource path
      local_var_path = "/securities/search"

      # query parameters
      query_params = {}
      query_params[:'query'] = query

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseSecurities')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SecurityApi#search_securities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
