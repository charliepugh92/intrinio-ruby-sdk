=begin
#Intrinio API

#Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module Intrinio
  class FilingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Filter Filings
    # Returns filings that match the specified filters
    # @param company Filings for the given &#x60;company&#x60; identifier (ticker, CIK, LEI, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :report_type Filter by report type
    # @option opts [Date] :start_date Filed on or after the given date
    # @option opts [Date] :end_date Filed before or after the given date
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseFilings]
    def filter_filings(company, opts = {})
      data, _status_code, _headers = filter_filings_with_http_info(company, opts)
      return data
    end

    # Filter Filings
    # Returns filings that match the specified filters
    # @param company Filings for the given &#x60;company&#x60; identifier (ticker, CIK, LEI, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :report_type Filter by report type
    # @option opts [Date] :start_date Filed on or after the given date
    # @option opts [Date] :end_date Filed before or after the given date
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseFilings, Fixnum, Hash)>] ApiResponseFilings data, response status code and response headers
    def filter_filings_with_http_info(company, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilingApi.filter_filings ..."
      end
      # verify the required parameter 'company' is set
      if @api_client.config.client_side_validation && company.nil?
        fail ArgumentError, "Missing the required parameter 'company' when calling FilingApi.filter_filings"
      end
      # resource path
      local_var_path = "/filings/filter"

      # query parameters
      query_params = {}
      query_params[:'company'] = company
      query_params[:'report_type'] = opts[:'report_type'] if !opts[:'report_type'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseFilings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilingApi#filter_filings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get All Filings
    # Returns all filings
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseFilings]
    def get_all_filings(opts = {})
      data, _status_code, _headers = get_all_filings_with_http_info(opts)
      return data
    end

    # Get All Filings
    # Returns all filings
    # @param [Hash] opts the optional parameters
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseFilings, Fixnum, Hash)>] ApiResponseFilings data, response status code and response headers
    def get_all_filings_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilingApi.get_all_filings ..."
      end
      # resource path
      local_var_path = "/filings"

      # query parameters
      query_params = {}
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseFilings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilingApi#get_all_filings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a Filing by ID
    # Return the filing with the given ID
    # @param id The Intrinio ID of the Filing
    # @param [Hash] opts the optional parameters
    # @return [Filing]
    def get_filing_by_id(id, opts = {})
      data, _status_code, _headers = get_filing_by_id_with_http_info(id, opts)
      return data
    end

    # Get a Filing by ID
    # Return the filing with the given ID
    # @param id The Intrinio ID of the Filing
    # @param [Hash] opts the optional parameters
    # @return [Array<(Filing, Fixnum, Hash)>] Filing data, response status code and response headers
    def get_filing_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilingApi.get_filing_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FilingApi.get_filing_by_id"
      end
      # resource path
      local_var_path = "/filings/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Filing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilingApi#get_filing_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
