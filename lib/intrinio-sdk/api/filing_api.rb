=begin
#Intrinio API

#Welcome to the Intrinio API! Through our Financial Data Marketplace, we offer a wide selection of financial data feed APIs sourced by our own proprietary processes as well as from many data vendors. For a complete API request / response reference please view the [Intrinio API documentation](https://intrinio.com/documentation/api_v2). If you need additional help in using the API, please visit the [Intrinio website](https://intrinio.com) and click on the chat icon in the lower right corner.

OpenAPI spec version: 2.6.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require "uri"

module Intrinio
  class FilingApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # All Filings
    # Returns all Filings. Returns Filings matching parameters when supplied.
    # @param company Filings for the given &#x60;company&#x60; identifier (ticker, CIK, LEI, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :report_type Filter by report type
    # @option opts [Date] :start_date Filed on or after the given date
    # @option opts [Date] :end_date Filed before or after the given date
    # @option opts [Integer] :page_size The number of results to return (default to 100)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseFilings]
    def get_all_filings(company, opts = {})
      data, _status_code, _headers = get_all_filings_with_http_info(company, opts)
      return data
    end

    # All Filings
    # Returns all Filings. Returns Filings matching parameters when supplied.
    # @param company Filings for the given &#x60;company&#x60; identifier (ticker, CIK, LEI, Intrinio ID)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :report_type Filter by report type
    # @option opts [Date] :start_date Filed on or after the given date
    # @option opts [Date] :end_date Filed before or after the given date
    # @option opts [Integer] :page_size The number of results to return
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseFilings, Fixnum, Hash)>] ApiResponseFilings data, response status code and response headers
    def get_all_filings_with_http_info(company, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilingApi.get_all_filings ..."
      end
      # verify the required parameter 'company' is set
      if @api_client.config.client_side_validation && company.nil?
        fail ArgumentError, "Missing the required parameter 'company' when calling FilingApi.get_all_filings"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FilingApi.get_all_filings, must be smaller than or equal to 10000.'
      end

      # resource path
      local_var_path = "/filings"

      # query parameters
      query_params = {}
      query_params[:'company'] = company
      query_params[:'report_type'] = opts[:'report_type'] if !opts[:'report_type'].nil?
      query_params[:'start_date'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'end_date'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseFilings')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilingApi#get_all_filings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # All Filing Notes
    # Return all Notes from all Filings, most-recent first. Returns notes matching parameters when supplied.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company A Company identifier (Ticker, CIK, LEI, Intrinio ID)
    # @option opts [String] :report_type Notes contained in filings that match the given report type
    # @option opts [Date] :filing_start_date Limit search to filings on or after this date
    # @option opts [Date] :filing_end_date Limit search to filings on or before this date
    # @option opts [Date] :period_ended_start_date Limit search to filings with a period end date on or after this date
    # @option opts [Date] :period_ended_end_date Limit search to filings with a period end date on or before this date
    # @option opts [Integer] :page_size The number of results to return (default to 100)
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [ApiResponseFilingNotes]
    def get_all_notes(opts = {})
      data, _status_code, _headers = get_all_notes_with_http_info(opts)
      return data
    end

    # All Filing Notes
    # Return all Notes from all Filings, most-recent first. Returns notes matching parameters when supplied.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :company A Company identifier (Ticker, CIK, LEI, Intrinio ID)
    # @option opts [String] :report_type Notes contained in filings that match the given report type
    # @option opts [Date] :filing_start_date Limit search to filings on or after this date
    # @option opts [Date] :filing_end_date Limit search to filings on or before this date
    # @option opts [Date] :period_ended_start_date Limit search to filings with a period end date on or after this date
    # @option opts [Date] :period_ended_end_date Limit search to filings with a period end date on or before this date
    # @option opts [Integer] :page_size The number of results to return
    # @option opts [String] :next_page Gets the next page of data from a previous API call
    # @return [Array<(ApiResponseFilingNotes, Fixnum, Hash)>] ApiResponseFilingNotes data, response status code and response headers
    def get_all_notes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilingApi.get_all_notes ..."
      end
      if @api_client.config.client_side_validation && opts[:'report_type'] && !['10-Q', '10-K'].include?(opts[:'report_type'])
        fail ArgumentError, 'invalid value for "report_type", must be one of 10-Q, 10-K'
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FilingApi.get_all_notes, must be smaller than or equal to 10000.'
      end

      # resource path
      local_var_path = "/filings/notes"

      # query parameters
      query_params = {}
      query_params[:'company'] = opts[:'company'] if !opts[:'company'].nil?
      query_params[:'report_type'] = opts[:'report_type'] if !opts[:'report_type'].nil?
      query_params[:'filing_start_date'] = opts[:'filing_start_date'] if !opts[:'filing_start_date'].nil?
      query_params[:'filing_end_date'] = opts[:'filing_end_date'] if !opts[:'filing_end_date'].nil?
      query_params[:'period_ended_start_date'] = opts[:'period_ended_start_date'] if !opts[:'period_ended_start_date'].nil?
      query_params[:'period_ended_end_date'] = opts[:'period_ended_end_date'] if !opts[:'period_ended_end_date'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'next_page'] = opts[:'next_page'] if !opts[:'next_page'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseFilingNotes')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilingApi#get_all_notes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lookup Filing
    # Returns the Filing with the given `identifier`
    # @param id The Intrinio ID of the Filing
    # @param [Hash] opts the optional parameters
    # @return [Filing]
    def get_filing_by_id(id, opts = {})
      data, _status_code, _headers = get_filing_by_id_with_http_info(id, opts)
      return data
    end

    # Lookup Filing
    # Returns the Filing with the given &#x60;identifier&#x60;
    # @param id The Intrinio ID of the Filing
    # @param [Hash] opts the optional parameters
    # @return [Array<(Filing, Fixnum, Hash)>] Filing data, response status code and response headers
    def get_filing_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilingApi.get_filing_by_id ..."
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling FilingApi.get_filing_by_id"
      end
      # resource path
      local_var_path = "/filings/{id}".sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Filing')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilingApi#get_filing_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Filing Note by ID
    # 
    # @param identifier The Intrinio ID of the filing note
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content_format Returns content in html (as filed) or plain text (default to text)
    # @return [FilingNote]
    def get_note(identifier, opts = {})
      data, _status_code, _headers = get_note_with_http_info(identifier, opts)
      return data
    end

    # Filing Note by ID
    # 
    # @param identifier The Intrinio ID of the filing note
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content_format Returns content in html (as filed) or plain text
    # @return [Array<(FilingNote, Fixnum, Hash)>] FilingNote data, response status code and response headers
    def get_note_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilingApi.get_note ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling FilingApi.get_note"
      end
      if @api_client.config.client_side_validation && opts[:'content_format'] && !['text', 'html'].include?(opts[:'content_format'])
        fail ArgumentError, 'invalid value for "content_format", must be one of text, html'
      end
      # resource path
      local_var_path = "/filings/notes/{identifier}".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}
      query_params[:'content_format'] = opts[:'content_format'] if !opts[:'content_format'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'FilingNote')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilingApi#get_note\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Filing Note HTML
    # 
    # @param identifier The Intrinio ID of the filing note
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_note_html(identifier, opts = {})
      data, _status_code, _headers = get_note_html_with_http_info(identifier, opts)
      return data
    end

    # Filing Note HTML
    # 
    # @param identifier The Intrinio ID of the filing note
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_note_html_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilingApi.get_note_html ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling FilingApi.get_note_html"
      end
      # resource path
      local_var_path = "/filings/notes/{identifier}/html".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilingApi#get_note_html\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Filing Note Text
    # 
    # @param identifier The Intrinio ID of the filing note
    # @param [Hash] opts the optional parameters
    # @return [String]
    def get_note_text(identifier, opts = {})
      data, _status_code, _headers = get_note_text_with_http_info(identifier, opts)
      return data
    end

    # Filing Note Text
    # 
    # @param identifier The Intrinio ID of the filing note
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_note_text_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilingApi.get_note_text ..."
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling FilingApi.get_note_text"
      end
      # resource path
      local_var_path = "/filings/notes/{identifier}/text".sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilingApi#get_note_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Filing Notes
    # Searches for Filing Notes using the `query`
    # @param query Search for notes that contain all or parts of this text
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :filing_start_date Limit search to filings on or after this date
    # @option opts [Date] :filing_end_date Limit search to filings on or before this date
    # @option opts [Integer] :page_size The number of results to return (default to 100)
    # @option opts [Integer] :page_size2 The number of results to return (default to 100)
    # @return [ApiResponseFilingNotesSearch]
    def search_notes(query, opts = {})
      data, _status_code, _headers = search_notes_with_http_info(query, opts)
      return data
    end

    # Search Filing Notes
    # Searches for Filing Notes using the &#x60;query&#x60;
    # @param query Search for notes that contain all or parts of this text
    # @param [Hash] opts the optional parameters
    # @option opts [Date] :filing_start_date Limit search to filings on or after this date
    # @option opts [Date] :filing_end_date Limit search to filings on or before this date
    # @option opts [Integer] :page_size The number of results to return
    # @option opts [Integer] :page_size2 The number of results to return
    # @return [Array<(ApiResponseFilingNotesSearch, Fixnum, Hash)>] ApiResponseFilingNotesSearch data, response status code and response headers
    def search_notes_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilingApi.search_notes ..."
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling FilingApi.search_notes"
      end
      if @api_client.config.client_side_validation && !opts[:'page_size'].nil? && opts[:'page_size'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"page_size"]" when calling FilingApi.search_notes, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'page_size2'].nil? && opts[:'page_size2'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"page_size2"]" when calling FilingApi.search_notes, must be smaller than or equal to 10000.'
      end

      # resource path
      local_var_path = "/filings/notes/search"

      # query parameters
      query_params = {}
      query_params[:'query'] = query
      query_params[:'filing_start_date'] = opts[:'filing_start_date'] if !opts[:'filing_start_date'].nil?
      query_params[:'filing_end_date'] = opts[:'filing_end_date'] if !opts[:'filing_end_date'].nil?
      query_params[:'page_size'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'page_size'] = opts[:'page_size2'] if !opts[:'page_size2'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['ApiKeyAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ApiResponseFilingNotesSearch')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilingApi#search_notes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
